# -*- coding: utf-8 -*-
"""Binary Tree File Explorer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x2YdjqTkoSTiuROpwyomlrZGgWhcTcG9
"""

import json
import os
import shutil

class Node:
    def __init__(self, name, is_directory=False):
        self.name = name
        self.is_directory = is_directory
        self.left = None  # Left child (subdirectory)
        self.right = None  # Right child (file or next directory)

class FileExplorer:
    def __init__(self, save_file="filesystem.json", storage_dir="fs_storage"):
        self.root = None
        self.current_path = "/"
        self.current_node = None
        self.save_file = save_file
        self.storage_dir = storage_dir
        if os.path.exists(self.storage_dir):
            shutil.rmtree(self.storage_dir)  # Clear storage on startup
        self.load_filesystem()  # Load existing filesystem

    def create_root(self, root_name):
        """Create root directory"""
        self.root = Node(root_name, True)
        self.current_node = self.root
        self.current_path = f"/{root_name}"
        os.makedirs(self._get_disk_path(self.current_path), exist_ok=True)
        self.save_filesystem()

    def add_directory(self, dir_name, relative_path="."):
        """Add a new directory under specified or current path"""
        parent = self._get_target_node(relative_path)
        if parent and parent.is_directory:
            new_dir = Node(dir_name, True)
            if not parent.left:
                parent.left = new_dir
            else:
                current = parent.left
                while current.right:
                    current = current.right
                current.right = new_dir
            # Create actual directory on disk
            parent_path = self._resolve_path(relative_path)
            dir_path = f"{parent_path}/{dir_name}" if parent_path != "/" else f"/{dir_name}"
            os.makedirs(self._get_disk_path(dir_path), exist_ok=True)
            self.save_filesystem()
            return True
        return False

    def add_file(self, file_name, relative_path="."):
        """Add a new file under specified or current path"""
        parent = self._get_target_node(relative_path)
        if parent and parent.is_directory:
            new_file = Node(file_name, False)
            if not parent.left:
                parent.left = new_file
            else:
                current = parent.left
                while current.right:
                    current = current.right
                current.right = new_file
            # Create empty file on disk
            parent_path = self._resolve_path(relative_path)
            file_path = f"{parent_path}/{file_name}" if parent_path != "/" else f"/{file_name}"
            with open(self._get_disk_path(file_path), 'w') as f:
                f.write("")
            self.save_filesystem()
            return True
        return False

    def write_file(self, file_name, relative_path="."):
        """Write multi-line content to a file"""
        file_node = self._find_file(file_name, relative_path)
        if file_node and not file_node.is_directory:
            print("Enter content (type 'END' on a new line to finish):")
            lines = []
            while True:
                line = input()
                if line.strip().upper() == "END":
                    break
                lines.append(line)
            content = "\n".join(lines)
            # Write to actual file on disk
            file_path = self._resolve_path(relative_path, file_name)
            with open(self._get_disk_path(file_path), 'w') as f:
                f.write(content)
            return True
        return False

    def read_file(self, file_name, relative_path="."):
        """Read content from a file"""
        file_node = self._find_file(file_name, relative_path)
        if file_node and not file_node.is_directory:
            file_path = self._resolve_path(relative_path, file_name)
            try:
                with open(self._get_disk_path(file_path), 'r') as f:
                    return f.read()
            except FileNotFoundError:
                return ""  # File exists in tree but not on disk
        return None

    def change_directory(self, path):
        """Change current directory"""
        if path == "/":
            if self.root:
                self.current_node = self.root
                self.current_path = f"/{self.root.name}"
                return True
            return False

        target = self._get_target_node(path)
        if target and target.is_directory:
            self.current_node = target
            if path.startswith("/"):
                self.current_path = path
            else:
                if self.current_path == f"/{self.root.name}":
                    self.current_path += f"/{path}"
                else:
                    self.current_path += f"/{path}"
            return True
        return False

    def _get_target_node(self, path):
        """Helper method to get node from relative or absolute path"""
        if path == ".":
            return self.current_node
        if path.startswith("/"):
            return self._find_node(self.root, path.split('/')[1:])
        return self._find_node(self.current_node, path.split('/'))

    def _find_node(self, current, path):
        """Helper method to find a node by path"""
        if not current or not path or path == ['']:
            return current

        if current.name == path[0]:
            if len(path) == 1:
                return current
            return self._find_node(current.left, path[1:])

        return self._find_node(current.right, path)

    def _find_file(self, file_name, relative_path):
        """Find a file node by name in the specified path"""
        parent = self._get_target_node(relative_path)
        if parent and parent.is_directory:
            current = parent.left
            while current:
                if current.name == file_name:
                    return current
                current = current.right
        return None

    def _resolve_path(self, relative_path, file_name=None):
        """Resolve relative or absolute path to absolute path"""
        if relative_path.startswith("/"):
            base_path = relative_path
        else:
            base_path = self.current_path
            if relative_path != ".":
                base_path += f"/{relative_path}" if base_path != "/" else relative_path
        if file_name:
            base_path += f"/{file_name}" if base_path != "/" else file_name
        return base_path

    def _get_disk_path(self, virtual_path):
        """Convert virtual path to disk path"""
        if virtual_path == "/":
            return self.storage_dir
        # Remove leading slash and prepend storage directory
        clean_path = virtual_path.lstrip("/")
        return os.path.join(self.storage_dir, clean_path)

    def list_contents(self, path="."):
        """List contents of a directory"""
        node = self._get_target_node(path)
        if not node or not node.is_directory:
            return []

        contents = []
        current = node.left
        while current:
            contents.append((current.name, "Directory" if current.is_directory else "File"))
            current = current.right
        return contents

    def display_tree(self, node=None, level=0):
        """Display the file system tree structure"""
        if not node:
            node = self.root
            if not node:
                return "Empty file system"

        result = []
        result.append("  " * level + f"{'[D]' if node.is_directory else '[F]'} {node.name}")

        if node.left:
            result.append(self.display_tree(node.left, level + 1))
        if node.right:
            result.append(self.display_tree(node.right, level))

        return "\n".join(result)

    def save_filesystem(self):
        """Save the filesystem structure (not content) to a JSON file"""
        if not self.root:
            return

        def serialize_node(node):
            if not node:
                return None
            return {
                "name": node.name,
                "is_directory": node.is_directory,
                "left": serialize_node(node.left),
                "right": serialize_node(node.right)
            }

        with open(self.save_file, 'w') as f:
            json.dump(serialize_node(self.root), f, indent=2)

    def load_filesystem(self):
        """Load the filesystem structure from a JSON file"""
        if not os.path.exists(self.save_file):
            return

        def deserialize_node(data):
            if not data:
                return None
            node = Node(data["name"], data["is_directory"])
            node.left = deserialize_node(data["left"])
            node.right = deserialize_node(data["right"])
            return node

        with open(self.save_file, 'r') as f:
            data = json.load(f)
            self.root = deserialize_node(data)
            if self.root:
                self.current_node = self.root
                self.current_path = f"/{self.root.name}"

def main():
    explorer = FileExplorer()
    print("Welcome to File Explorer!")
    print("Type 'help' for commands")

    while True:
        command = input(f"{explorer.current_path}> ").strip().lower()
        parts = command.split(maxsplit=2)  # Split into at most 3 parts

        if not parts:
            continue

        if parts[0] == 'help':
            print("""
Commands:
  init <name>          - Create root directory
  mkdir <name> [path]  - Create directory (path optional, defaults to current)
  touch <name> [path]  - Create file (path optional, defaults to current)
  write <name> [path]  - Write multi-line content to file (path optional)
  read <name> [path]   - Read content from file (path optional)
  cd <path>            - Change directory (use '.' for current, '/' for root)
  dir                  - List contents of current directory
  pwd                  - Show current path
  tree                 - Show full file system tree
  exit                 - Quit
            """)

        elif parts[0] == 'init' and len(parts) == 2:
            explorer.create_root(parts[1])
            print(f"Root directory '{parts[1]}' created")

        elif parts[0] == 'mkdir' and len(parts) >= 2:
            path = parts[2] if len(parts) == 3 else "."
            if explorer.add_directory(parts[1], path):
                print(f"Directory '{parts[1]}' created")
            else:
                print("Failed to create directory. Check path or root existence")

        elif parts[0] == 'touch' and len(parts) >= 2:
            path = parts[2] if len(parts) == 3 else "."
            if explorer.add_file(parts[1], path):
                print(f"File '{parts[1]}' created")
            else:
                print("Failed to create file. Check path or root existence")

        elif parts[0] == 'write' and len(parts) >= 2:
            path = parts[2] if len(parts) == 3 else "."
            if explorer.write_file(parts[1], path):
                print(f"Content written to '{parts[1]}'")
            else:
                print("Failed to write. File not found or path invalid")

        elif parts[0] == 'read' and len(parts) >= 2:
            path = parts[2] if len(parts) == 3 else "."
            content = explorer.read_file(parts[1], path)
            if content is not None:
                print(f"Content of '{parts[1]}':")
                print(content)
            else:
                print("File not found or path invalid")

        elif parts[0] == 'cd' and len(parts) == 2:
            if explorer.change_directory(parts[1]):
                print(f"Changed to {explorer.current_path}")
            else:
                print("Directory not found or root not initialized")

        elif parts[0] == 'dir' and len(parts) == 1:
            contents = explorer.list_contents()
            if contents:
                print("Directory contents:")
                for name, type_ in contents:
                    print(f"{type_}: {name}")
            else:
                print("Directory is empty or not found")

        elif parts[0] == 'pwd' and len(parts) == 1:
            print(f"Current path: {explorer.current_path}")

        elif parts[0] == 'tree' and len(parts) == 1:
            print("\nFile System Structure:")
            print(explorer.display_tree())

        elif parts[0] == 'exit':
            print("Goodbye!")
            break

        else:
            print("Invalid command. Type 'help' for commands")

if __name__ == "__main__":
    main()

